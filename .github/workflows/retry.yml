name: Retry Workflow

on:
  workflow_run:
    workflows:
      - failure-workflow
    types:
      - completed

jobs:
  retry:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure'
    steps:
      - name: Analyze jobs
        id: job-analysis
        uses: actions/github-script@v7
        with:
          script: |
            let response = [];
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            for (let job of jobs.data.jobs) {
              if (job.conclusion === 'failure') {
                let result = {
                  name: job.name,
                  job_id: job.id,
                  check_run_url: job.check_run_url,
                };
                response.push(result);
              }
            }
            return response;
      - name: Analyze Check Runs
        id: check-run-analysis
        uses: actions/github-script@v7
        with:
          script: |
            let response = false;
            let jobs = ${{ steps.job-analysis.outputs.result }};
            // parse the checkruns annotations.message and if it contains apple, set response to true
            for (let job of jobs) {
              let annotations = await github.rest.checks.listAnnotations({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: job.job_id
              });
              let messages = annotations.data.find(({ message }) => message.includes("with exit code 1"));
              if (messages.length > 0) {
                response = true;
                break;
              }
            }
            return response;
      - name: Retry Workflow
        if: steps.check-run-analysis.outputs.result == true
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.actions.reRunWorkflow({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            return response;
